import { config } from './config.js';
import { marked } from 'marked';

document.addEventListener('DOMContentLoaded', () => {
    // Elements
    const templateSelect = document.getElementById('template-select');
    const designPrompt = document.getElementById('design-prompt');
    const generateButton = document.getElementById('generate-button');
    const refreshButton = document.getElementById('refresh-button');
    const downloadButton = document.getElementById('download-button');
    const resultContainer = document.getElementById('result-container');
    const loadingIndicator = document.getElementById('loading-indicator');
    const styleRadios = document.querySelectorAll('input[name="style"]');
    const themeRadios = document.querySelectorAll('input[name="theme"]');
    const exportButtons = document.querySelectorAll('.export-options button');

    // Mock UI designs (in a real implementation, these would be generated by the AI)
    const mockDesigns = {
        dashboard: `
            <svg viewBox="0 0 800 500" width="100%" height="auto">
                <!-- Dark Theme Dashboard Mockup -->
                <rect x="0" y="0" width="800" height="500" fill="#1E1E2E" rx="8" ry="8"/>
                <!-- Left Navigation -->
                <rect x="0" y="0" width="200" height="500" fill="#181825" rx="0" ry="0"/>
                <!-- Logo Area -->
                <rect x="40" y="30" width="120" height="40" fill="#313244" rx="8" ry="8"/>
                <!-- Nav Items -->
                <rect x="30" y="120" width="140" height="40" fill="#313244" rx="8" ry="8"/>
                <rect x="30" y="180" width="140" height="40" fill="#313244" rx="8" ry="8"/>
                <rect x="30" y="240" width="140" height="40" fill="#313244" rx="8" ry="8"/>
                <rect x="30" y="300" width="140" height="40" fill="#313244" rx="8" ry="8"/>
                <!-- Stats Cards -->
                <rect x="230" y="30" width="160" height="100" fill="#313244" rx="8" ry="8"/>
                <rect x="410" y="30" width="160" height="100" fill="#313244" rx="8" ry="8"/>
                <rect x="590" y="30" width="160" height="100" fill="#313244" rx="8" ry="8"/>
                <!-- Main Content Area -->
                <rect x="230" y="150" width="520" height="150" fill="#313244" rx="8" ry="8"/>
                <rect x="230" y="320" width="250" height="150" fill="#313244" rx="8" ry="8"/>
                <rect x="500" y="320" width="250" height="150" fill="#313244" rx="8" ry="8"/>
            </svg>
        `,
        landing: `
            <svg viewBox="0 0 800 500" width="100%" height="auto">
                <!-- Light Theme Landing Page Mockup -->
                <rect x="0" y="0" width="800" height="500" fill="#FFFFFF" rx="8" ry="8"/>
                <!-- Header -->
                <rect x="0" y="0" width="800" height="70" fill="#F8F9FA" rx="0" ry="0"/>
                <rect x="40" y="20" width="120" height="30" fill="#E0E0E0" rx="4" ry="4"/>
                <rect x="600" y="20" width="70" height="30" fill="#E0E0E0" rx="4" ry="4"/>
                <rect x="690" y="20" width="70" height="30" fill="#0066FF" rx="4" ry="4"/>
                <!-- Hero Section -->
                <rect x="40" y="120" width="350" height="50" fill="#E0E0E0" rx="4" ry="4"/>
                <rect x="40" y="190" width="300" height="30" fill="#E0E0E0" rx="4" ry="4"/>
                <rect x="40" y="240" width="150" height="40" fill="#0066FF" rx="4" ry="4"/>
                <rect x="500" y="100" width="250" height="200" fill="#F8F9FA" rx="8" ry="8"/>
                <!-- Features Section -->
                <rect x="40" y="350" width="220" height="120" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="290" y="350" width="220" height="120" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="540" y="350" width="220" height="120" fill="#F8F9FA" rx="8" ry="8"/>
            </svg>
        `,
        mobile: `
            <svg viewBox="0 0 360 640" width="100%" height="auto">
                <!-- Mobile App Interface Mockup -->
                <rect x="0" y="0" width="360" height="640" fill="#FFFFFF" rx="8" ry="8"/>
                <!-- Status Bar -->
                <rect x="0" y="0" width="360" height="40" fill="#F8F9FA" rx="0" ry="0"/>
                <!-- Profile Header -->
                <rect x="0" y="40" width="360" height="150" fill="#0066FF" rx="0" ry="0"/>
                <circle cx="180" cy="100" r="50" fill="#FFFFFF"/>
                <rect x="130" y="160" width="100" height="20" fill="#FFFFFF" rx="4" ry="4"/>
                <!-- Stats Cards -->
                <rect x="20" y="210" width="100" height="80" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="130" y="210" width="100" height="80" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="240" y="210" width="100" height="80" fill="#F8F9FA" rx="8" ry="8"/>
                <!-- Activity Feed -->
                <rect x="20" y="310" width="320" height="60" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="20" y="380" width="320" height="60" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="20" y="450" width="320" height="60" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="20" y="520" width="320" height="60" fill="#F8F9FA" rx="8" ry="8"/>
                <!-- Bottom Navigation -->
                <rect x="0" y="600" width="360" height="40" fill="#F8F9FA" rx="0" ry="0"/>
                <rect x="30" y="610" width="60" height="20" fill="#E0E0E0" rx="4" ry="4"/>
                <rect x="150" y="610" width="60" height="20" fill="#0066FF" rx="4" ry="4"/>
                <rect x="270" y="610" width="60" height="20" fill="#E0E0E0" rx="4" ry="4"/>
            </svg>
        `,
        form: `
            <svg viewBox="0 0 800 500" width="100%" height="auto">
                <!-- Form UI Mockup -->
                <rect x="0" y="0" width="800" height="500" fill="#FFFFFF" rx="8" ry="8"/>
                <!-- Progress Indicator -->
                <rect x="150" y="40" width="500" height="10" fill="#F8F9FA" rx="5" ry="5"/>
                <rect x="150" y="40" width="166" height="10" fill="#0066FF" rx="5" ry="5"/>
                <circle cx="150" cy="45" r="15" fill="#0066FF"/>
                <circle cx="316" cy="45" r="15" fill="#0066FF"/>
                <circle cx="482" cy="45" r="15" fill="#E0E0E0"/>
                <circle cx="650" cy="45" r="15" fill="#E0E0E0"/>
                <!-- Form Fields -->
                <rect x="150" y="100" width="500" height="50" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="150" y="170" width="500" height="50" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="150" y="240" width="500" height="50" fill="#F8F9FA" rx="8" ry="8"/>
                <rect x="150" y="310" width="500" height="50" fill="#F8F9FA" rx="8" ry="8"/>
                <!-- Submit Button -->
                <rect x="150" y="400" width="500" height="50" fill="#0066FF" rx="8" ry="8"/>
            </svg>
        `
    };

    // Get selected design style
    const getSelectedStyle = () => {
        for (const radio of styleRadios) {
            if (radio.checked) {
                return radio.value;
            }
        }
        return config.defaults.style;
    };

    // Get selected theme
    const getSelectedTheme = () => {
        for (const radio of themeRadios) {
            if (radio.checked) {
                return radio.value;
            }
        }
        return config.defaults.theme;
    };

    // Show loading state
    const showLoading = () => {
        loadingIndicator.classList.remove('hidden');
    };

    // Hide loading state
    const hideLoading = () => {
        loadingIndicator.classList.add('hidden');
    };

    // Generate design (simulated with setTimeout to mimic API call)
    const generateDesign = () => {
        const prompt = designPrompt.value.trim();
        if (!prompt) {
            alert('Please enter a design description');
            return;
        }

        const style = getSelectedStyle();
        const theme = getSelectedTheme();

        showLoading();

        // Simulate API call with setTimeout
        setTimeout(() => {
            // For demo purposes, we'll use predefined mockups based on template
            let designTemplate = templateSelect.value;
            
            // If no template is selected or it's a custom prompt, 
            // choose a random one for demonstration
            if (!designTemplate) {
                const templates = Object.keys(mockDesigns);
                designTemplate = templates[Math.floor(Math.random() * templates.length)];
            }
            
            // Display the generated design
            resultContainer.innerHTML = mockDesigns[designTemplate];
            
            hideLoading();
        }, 1500);
    };

    // Export design
    const exportDesign = (format) => {
        showLoading();
        
        // Simulate API call with setTimeout
        setTimeout(() => {
            let exportContent = '';
            
            switch (format) {
                case 'html':
                    exportContent = `
                        <!DOCTYPE html>
                        <html lang="en">
                        <head>
                            <meta charset="UTF-8">
                            <meta name="viewport" content="width=device-width, initial-scale=1.0">
                            <title>Generated Design</title>
                            <style>
                                /* Generated CSS would go here */
                                body { font-family: sans-serif; margin: 0; padding: 0; }
                                .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                                /* More styles based on the design */
                            </style>
                        </head>
                        <body>
                            <div class="container">
                                <!-- Generated HTML would go here -->
                                <h1>Generated Design</h1>
                                <p>This is a placeholder for the generated HTML content.</p>
                            </div>
                        </body>
                        </html>
                    `;
                    break;
                    
                case 'svg':
                    // Get the current SVG from the result container
                    exportContent = resultContainer.innerHTML;
                    break;
                    
                case 'figma':
                    exportContent = 'Figma export would be generated here.';
                    break;
                    
                case 'react':
                    exportContent = `
                        import React from 'react';
                        
                        const GeneratedComponent = () => {
                            return (
                                <div className="container">
                                    {/* Generated React components would go here */}
                                    <h1>Generated Design</h1>
                                    <p>This is a placeholder for the generated React component.</p>
                                </div>
                            );
                        };
                        
                        export default GeneratedComponent;
                    `;
                    break;
                    
                default:
                    exportContent = 'Unknown format requested';
            }
            
            // In a real app, this would trigger a download
            // For demo purposes, we'll just log it to console
            console.log(`Export ${format}:`, exportContent);
            
            // Alternatively, you could create a download link:
            // const blob = new Blob([exportContent], { type: 'text/plain' });
            // const url = URL.createObjectURL(blob);
            // const a = document.createElement('a');
            // a.href = url;
            // a.download = `design-export.${format}`;
            // a.click();
            
            hideLoading();
            alert(`Design exported as ${format}. In a production version, this would trigger a download.`);
        }, 1000);
    };

    // Event listeners
    if (templateSelect) {
        templateSelect.addEventListener('change', () => {
            const selectedTemplate = templateSelect.value;
            if (selectedTemplate && config.templates[selectedTemplate]) {
                designPrompt.value = config.templates[selectedTemplate];
            }
        });
    }

    if (generateButton) {
        generateButton.addEventListener('click', generateDesign);
    }

    if (refreshButton) {
        refreshButton.addEventListener('click', generateDesign);
    }

    if (downloadButton) {
        downloadButton.addEventListener('click', () => {
            exportDesign('svg');
        });
    }

    // Export format buttons
    exportButtons.forEach(button => {
        button.addEventListener('click', () => {
            const format = button.getAttribute('data-format');
            exportDesign(format);
        });
    });

    // Handle Enter key in the prompt textarea
    if (designPrompt) {
        designPrompt.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && e.ctrlKey) {
                e.preventDefault();
                generateDesign();
            }
        });
    }

    // Initialize with placeholder content
    if (resultContainer) {
        resultContainer.innerHTML = `
            <div class="placeholder-message">
                Enter a description and click "Generate Design" to see the result
            </div>
        `;
    }
});

